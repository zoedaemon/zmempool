\0xE8\0xFE"

########################################################################## 
TEST CASE : 
zMemPool_Test_1 :> inisialisasi memory pool zMemPool 
PROCESSING...

<<<<<<<<<< INISIALISASI AWAL BERHASIL BROOOHhh : 00590020>>>>>>>>>>

\0xE8\0xFE"zMemPool_Test.c:341:zMemPool_Test_1:PASS
\0xE8\0xFE"

########################################################################## 
TEST CASE : 
zMemPool_Test_2 :> test zMemPool_malloc dan lakukan copy string k alamat memori mempool yg diset 
PROCESSING...

String in MemPool : INI BUDI COYYYYYYYYYYYY

<<<<<<<<<< Copy data berhasil >>>>>>>>>>
_mempool : 00581770
_mempool->start_pointer : 00590020
_mempool->total_size_t  : 1000000000
_mempool->gap (segment gap) : 1
_mempool->n_segment : 2
_mempool->current_end_pointer : 00590045
_mempool->end_pointer : 3BF3CA20
_mempool->current_size : 20
_mempool->segment_header_start : 00000000
_mempool->segment_header_end : 0

\0xE8\0xFE"zMemPool_Test.c:342:zMemPool_Test_2:PASS
\0xE8\0xFE"

########################################################################## 
TEST CASE : 
zMemPool_Test_3 :> test alokasi dengan fungsi zMemPool_calloc untuk array pointer dan pointer of pointer 
PROCESSING...

init : 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 
compare : 
0 : <<<<<<<<<< Copy data berhasil >>>>>>>>>>
1 : <<<<<<<<<< Copy data berhasil >>>>>>>>>>
2 : <<<<<<<<<< Copy data berhasil >>>>>>>>>>
3 : <<<<<<<<<< Copy data berhasil >>>>>>>>>>
4 : <<<<<<<<<< Copy data berhasil >>>>>>>>>>
5 : <<<<<<<<<< Copy data berhasil >>>>>>>>>>
6 : <<<<<<<<<< Copy data berhasil >>>>>>>>>>
7 : <<<<<<<<<< Copy data berhasil >>>>>>>>>>
8 : <<<<<<<<<< Copy data berhasil >>>>>>>>>>
9 : <<<<<<<<<< Copy data berhasil >>>>>>>>>>
_mempool : 00581770
_mempool->start_pointer : 00590020
_mempool->total_size_t  : 1000000000
_mempool->gap (segment gap) : 1
_mempool->n_segment : 3
_mempool->current_end_pointer : 0059008F
_mempool->end_pointer : 3BF3CA20
_mempool->current_size : 77
_mempool->segment_header_start : 00000000
_mempool->segment_header_end : 0

init : aab, aba, baa, abc, acb, cba, abcd, abdc, adbc, dabc, 
compare : 
<<<<<<<<<< Copy data berhasil >>>>>>>>>>
<<<<<<<<<< Copy data berhasil >>>>>>>>>>
<<<<<<<<<< Copy data berhasil >>>>>>>>>>
<<<<<<<<<< Copy data berhasil >>>>>>>>>>
<<<<<<<<<< Copy data berhasil >>>>>>>>>>
<<<<<<<<<< Copy data berhasil >>>>>>>>>>
<<<<<<<<<< Copy data berhasil >>>>>>>>>>
<<<<<<<<<< Copy data berhasil >>>>>>>>>>
<<<<<<<<<< Copy data berhasil >>>>>>>>>>
<<<<<<<<<< Copy data berhasil >>>>>>>>>>
_mempool : 00581770
_mempool->start_pointer : 00590020
_mempool->total_size_t  : 1000000000
_mempool->gap (segment gap) : 1
_mempool->n_segment : 14
_mempool->current_end_pointer : 0059024F
_mempool->end_pointer : 3BF3CA20
_mempool->current_size : 338
_mempool->segment_header_start : 00000000
_mempool->segment_header_end : 0

\0xE8\0xFE"zMemPool_Test.c:343:zMemPool_Test_3:PASS
\0xE8\0xFE"

########################################################################## 
TEST CASE : 
zMemPool_Test_4 :> test alokasi dengan fungsi zMemPool_calloc untuk pointers of struct 
PROCESSING...

init : (akddjfkl, 2334)(kskalssad, 9822)(doasip[asdop, 182)(poaihskdbas, 299)(oiasd0-39o, 1100)(aslkdjja0-pe, 99932)(daposihdausi, 312321)(e392ueids[s', 111111)(a7yweuhjsd, 444444)(82ioiwasol, 345656)
compare data : 
<<<<<<<<<< Copy data berhasil >>>>>>>>>>
<<<<<<<<<< Copy data berhasil >>>>>>>>>>
<<<<<<<<<< Copy data berhasil >>>>>>>>>>
<<<<<<<<<< Copy data berhasil >>>>>>>>>>
<<<<<<<<<< Copy data berhasil >>>>>>>>>>
<<<<<<<<<< Copy data berhasil >>>>>>>>>>
<<<<<<<<<< Copy data berhasil >>>>>>>>>>
<<<<<<<<<< Copy data berhasil >>>>>>>>>>
<<<<<<<<<< Copy data berhasil >>>>>>>>>>
<<<<<<<<<< Copy data berhasil >>>>>>>>>>
_mempool : 00581770
_mempool->start_pointer : 00590020
_mempool->total_size_t  : 1000000000
_mempool->gap (segment gap) : 1
_mempool->n_segment : 35
_mempool->current_end_pointer : 005905FB
_mempool->end_pointer : 3BF3CA20
_mempool->current_size : 921
_mempool->segment_header_start : 00000000
_mempool->segment_header_end : 0

\0xE8\0xFE"zMemPool_Test.c:344:zMemPool_Test_4:PASS
\0xE8\0xFE"

########################################################################## 
TEST CASE : 
zMemPool_Test_5 :> test dealokasi dengan fungsi zMemPool_free :D 
PROCESSING...


init : 1234, 123456, 123, 12345678, 1, 123, 1234567890, 123456789012345, 12, 123456, 

validate copied data : 
....VALID


freeing selectif data : 
freeing : 123456
segment_header : 0059066B
segment_header->current_start_pointer : 0059067C
segment_header->reserved_size : 6
segment_header->freed : 1
segment_header->next_segment : 00590693
freeing : 123
segment_header : 00590705
segment_header->current_start_pointer : 00590716
segment_header->reserved_size : 3
segment_header->freed : 1
segment_header->next_segment : 0059072A
segment_header : 0059066B
segment_header->current_start_pointer : 0059067C
segment_header->reserved_size : 6
segment_header->freed : 1
segment_header->next_segment : 00590693
freeing : 1234567890
segment_header : 00590705
segment_header->current_start_pointer : 00590716
segment_header->reserved_size : 3
segment_header->freed : 1
segment_header->next_segment : 0059072A
segment_header : 0059066B
segment_header->current_start_pointer : 0059067C
segment_header->reserved_size : 6
segment_header->freed : 1
segment_header->next_segment : 00590693
segment_header : 0059072A
segment_header->current_start_pointer : 0059073B
segment_header->reserved_size : 10
segment_header->freed : 1
segment_header->next_segment : 00590756
freeing : 12
segment_header : 00590787
segment_header->current_start_pointer : 00590798
segment_header->reserved_size : 2
segment_header->freed : 1
segment_header->next_segment : 005907AB
segment_header : 00590705
segment_header->current_start_pointer : 00590716
segment_header->reserved_size : 3
segment_header->freed : 1
segment_header->next_segment : 0059072A
segment_header : 0059066B
segment_header->current_start_pointer : 0059067C
segment_header->reserved_size : 6
segment_header->freed : 1
segment_header->next_segment : 00590693
segment_header : 0059072A
segment_header->current_start_pointer : 0059073B
segment_header->reserved_size : 10
segment_header->freed : 1
segment_header->next_segment : 00590756
freeing : 123456
segment_header : 00590787
segment_header->current_start_pointer : 00590798
segment_header->reserved_size : 2
segment_header->freed : 1
segment_header->next_segment : 005907AB
segment_header : 00590705
segment_header->current_start_pointer : 00590716
segment_header->reserved_size : 3
segment_header->freed : 1
segment_header->next_segment : 0059072A
segment_header : 0059066B
segment_header->current_start_pointer : 0059067C
segment_header->reserved_size : 6
segment_header->freed : 1
segment_header->next_segment : 00590693
segment_header : 005907AB
segment_header->current_start_pointer : 005907BC
segment_header->reserved_size : 6
segment_header->freed : 1
segment_header->next_segment : 005907D3
segment_header : 0059072A
segment_header->current_start_pointer : 0059073B
segment_header->reserved_size : 10
segment_header->freed : 1
segment_header->next_segment : 00590756
freeing : 1234
segment_header : 00590787
segment_header->current_start_pointer : 00590798
segment_header->reserved_size : 2
segment_header->freed : 1
segment_header->next_segment : 005907AB
segment_header : 00590705
segment_header->current_start_pointer : 00590716
segment_header->reserved_size : 3
segment_header->freed : 1
segment_header->next_segment : 0059072A
segment_header : 00590645
segment_header->current_start_pointer : 00590656
segment_header->reserved_size : 4
segment_header->freed : 1
segment_header->next_segment : 0059066B
segment_header : 0059066B
segment_header->current_start_pointer : 0059067C
segment_header->reserved_size : 6
segment_header->freed : 1
segment_header->next_segment : 00590693
segment_header : 005907AB
segment_header->current_start_pointer : 005907BC
segment_header->reserved_size : 6
segment_header->freed : 1
segment_header->next_segment : 005907D3
segment_header : 0059072A
segment_header->current_start_pointer : 0059073B
segment_header->reserved_size : 10
segment_header->freed : 1
segment_header->next_segment : 00590756
freeing : 123
segment_header : 00590787
segment_header->current_start_pointer : 00590798
segment_header->reserved_size : 2
segment_header->freed : 1
segment_header->next_segment : 005907AB
segment_header : 00590705
segment_header->current_start_pointer : 00590716
segment_header->reserved_size : 3
segment_header->freed : 1
segment_header->next_segment : 0059072A
segment_header : 00590645
segment_header->current_start_pointer : 00590656
segment_header->reserved_size : 4
segment_header->freed : 1
segment_header->next_segment : 0059066B
segment_header : 0059066B
segment_header->current_start_pointer : 0059067C
segment_header->reserved_size : 6
segment_header->freed : 1
segment_header->next_segment : 00590693
segment_header : 005907AB
segment_header->current_start_pointer : 005907BC
segment_header->reserved_size : 6
segment_header->freed : 1
segment_header->next_segment : 005907D3
segment_header : 0059072A
segment_header->current_start_pointer : 0059073B
segment_header->reserved_size : 10
segment_header->freed : 1
segment_header->next_segment : 00590756
freeing : 1
segment_header : 005906E2
segment_header->current_start_pointer : 005906F3
segment_header->reserved_size : 1
segment_header->freed : 1
segment_header->next_segment : 00590705
segment_header : 00590787
segment_header->current_start_pointer : 00590798
segment_header->reserved_size : 2
segment_header->freed : 1
segment_header->next_segment : 005907AB
segment_header : 00590705
segment_header->current_start_pointer : 00590716
segment_header->reserved_size : 3
segment_header->freed : 1
segment_header->next_segment : 0059072A
segment_header : 00590645
segment_header->current_start_pointer : 00590656
segment_header->reserved_size : 4
segment_header->freed : 1
segment_header->next_segment : 0059066B
segment_header : 0059066B
segment_header->current_start_pointer : 0059067C
segment_header->reserved_size : 6
segment_header->freed : 1
segment_header->next_segment : 00590693
segment_header : 005907AB
segment_header->current_start_pointer : 005907BC
segment_header->reserved_size : 6
segment_header->freed : 1
segment_header->next_segment : 005907D3
segment_header : 0059072A
segment_header->current_start_pointer : 0059073B
segment_header->reserved_size : 10
segment_header->freed : 1
segment_header->next_segment : 00590756
freeing : 12345678
segment_header : 005906E2
segment_header->current_start_pointer : 005906F3
segment_header->reserved_size : 1
segment_header->freed : 1
segment_header->next_segment : 00590705
segment_header : 00590787
segment_header->current_start_pointer : 00590798
segment_header->reserved_size : 2
segment_header->freed : 1
segment_header->next_segment : 005907AB
segment_header : 00590705
segment_header->current_start_pointer : 00590716
segment_header->reserved_size : 3
segment_header->freed : 1
segment_header->next_segment : 0059072A
segment_header : 00590645
segment_header->current_start_pointer : 00590656
segment_header->reserved_size : 4
segment_header->freed : 1
segment_header->next_segment : 0059066B
segment_header : 0059066B
segment_header->current_start_pointer : 0059067C
segment_header->reserved_size : 6
segment_header->freed : 1
segment_header->next_segment : 00590693
segment_header : 005906B8
segment_header->current_start_pointer : 005906C9
segment_header->reserved_size : 8
segment_header->freed : 1
segment_header->next_segment : 005906E2
segment_header : 0059072A
segment_header->current_start_pointer : 0059073B
segment_header->reserved_size : 10
segment_header->freed : 1
segment_header->next_segment : 00590756
freeing : 123456789012345
segment_header : 005906E2
segment_header->current_start_pointer : 005906F3
segment_header->reserved_size : 1
segment_header->freed : 1
segment_header->next_segment : 00590705
segment_header : 00590787
segment_header->current_start_pointer : 00590798
segment_header->reserved_size : 2
segment_header->freed : 1
segment_header->next_segment : 005907AB
segment_header : 00590705
segment_header->current_start_pointer : 00590716
segment_header->reserved_size : 3
segment_header->freed : 1
segment_header->next_segment : 0059072A
segment_header : 00590645
segment_header->current_start_pointer : 00590656
segment_header->reserved_size : 4
segment_header->freed : 1
segment_header->next_segment : 0059066B
segment_header : 0059066B
segment_header->current_start_pointer : 0059067C
segment_header->reserved_size : 6
segment_header->freed : 1
segment_header->next_segment : 00590693
segment_header : 005906B8
segment_header->current_start_pointer : 005906C9
segment_header->reserved_size : 8
segment_header->freed : 1
segment_header->next_segment : 005906E2
segment_header : 0059072A
segment_header->current_start_pointer : 0059073B
segment_header->reserved_size : 10
segment_header->freed : 1
segment_header->next_segment : 00590756
segment_header : 00590756
segment_header->current_start_pointer : 00590767
segment_header->reserved_size : 15
segment_header->freed : 1
segment_header->next_segment : 00590787
segment_header : 005906E2
segment_header->current_start_pointer : 005906F3
segment_header->reserved_size : 1
segment_header->freed : 1
segment_header->next_segment : 00590705
segment_header : 00590787
segment_header->current_start_pointer : 00590798
segment_header->reserved_size : 2
segment_header->freed : 1
segment_header->next_segment : 005907AB
segment_header : 00590705
segment_header->current_start_pointer : 00590716
segment_header->reserved_size : 3
segment_header->freed : 1
segment_header->next_segment : 0059072A
segment_header : 00590645
segment_header->current_start_pointer : 00590656
segment_header->reserved_size : 4
segment_header->freed : 1
segment_header->next_segment : 0059066B
segment_header : 0059066B
segment_header->current_start_pointer : 0059067C
segment_header->reserved_size : 6
segment_header->freed : 1
segment_header->next_segment : 00590693
segment_header : 005906B8
segment_header->current_start_pointer : 005906C9
segment_header->reserved_size : 8
segment_header->freed : 1
segment_header->next_segment : 005906E2
segment_header : 0059072A
segment_header->current_start_pointer : 0059073B
segment_header->reserved_size : 10
segment_header->freed : 1
segment_header->next_segment : 00590756
segment_header : 00590756
segment_header->current_start_pointer : 00590767
segment_header->reserved_size : 15
segment_header->freed : 1
segment_header->next_segment : 00590787


validate success freed zMemPool segments : 
_mempool : 00581770
_mempool->start_pointer : 00590020
_mempool->total_size_t  : 1000000000
_mempool->gap (segment gap) : 1
_mempool->n_segment : 46
_mempool->current_end_pointer : 005907D3
_mempool->end_pointer : 3BF3CA20
_mempool->current_size : 1206
_mempool->segment_header_start : 00584440
_mempool->segment_header_end : 5784688

\0xE8\0xFE"zMemPool_Test.c:345:zMemPool_Test_5:PASS

-----------------------
5 Tests 0 Failures 0 Ignored 
OK
